{"version":3,"sources":["components/Footer.js","components/Emotion.js","components/Emotions.js","components/Header.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Emotion","this","props","emotion","React","Component","Emotions","window","location","href","state","emotions","apiURL","hostname","host","console","log","fetch","method","then","res","json","data","setState","catch","map","key","id","style","color","value","Header","Home","className","onClick","authenticate","App","loggedIn","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAUeA,MARf,WACI,OACI,qDCgBOC,E,iLANP,OACI,4CAAkBC,KAAKC,MAAMC,a,GAHnBC,IAAMC,WC0DbC,GAhEYC,OAAOC,SAASC,K,2MAQvCC,MAAQ,CACJC,SAAU,I,mFAGO,IAEbC,EAFY,OACVC,EAAWN,OAAOC,SAASM,KAG7BF,EADa,mBAAbC,EACS,iCAEA,gDAEbE,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GAeZI,MAAML,EAAQ,CACVM,OAAQ,QAKXC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UAEdF,MAAK,SAAAG,GACF,EAAKC,SAAS,CAACZ,SAAUW,OAE5BE,MAAMT,QAAQC,O,+BASf,OANAD,QAAQC,IAAIf,KAAKS,MAAMC,UACFV,KAAKS,MAAMC,SAASc,KAAI,SAAAtB,GACzC,OACI,kBAAC,EAAD,CAASuB,IAAKvB,EAAQwB,GAAIC,MAAO,CAACC,MAAO1B,EAAQ0B,OAAQ1B,QAASA,EAAQ2B,e,GAnDnE1B,IAAMC,YCCd0B,MARf,WACI,OACI,+DCaOC,E,iLAbP,OACI,yBAAKC,UAAU,aACf,yBAAKA,UAAU,kDACf,uCACA,qDACA,qDACA,uBAAGC,QAASjC,KAAKkC,aAAcF,UAAU,8CAAzC,iB,GARO7B,IAAMC,WC+GV+B,E,iLAfX,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,MACEhC,KAAKoC,SAEL,kBAAC,EAAD,MADA,kBAAC,EAAD,MAKF,kBAAC,EAAD,W,GAlGUjC,IAAMC,WCGJiC,QACW,cAA7B/B,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAAS0B,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.dbfa819c.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Footer() {\n    return (\n        <footer>\n                Grumpy Gery Inc.\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react'\n\n\n// fetch('https://localhost:5000/emotions', {\n//     method: \"GET\",\n//     headers: {\"Content-Type\": }\n// }).then(results => {\n//     console.log(results)\n// }).then(data=> {\n//     console.log(data)\n// })\n\nclass Emotion extends React.Component {\n    render () {\n        return (\n            <div>Im feeling: {this.props.emotion}</div>\n        )\n    }\n}\n\nexport default Emotion","import React from \"react\"\nimport Emotion from \"./Emotion\"\n// import { useAuth0 } from \"../react-auth0-spa\"\nconst AUTH0_CLIENT_ID = \"gLbuiq396FHA7I0UKRgSAJWSEmdVqQzY\";\nconst AUTH0_DOMAIN = \"emotion-app-auth.auth0.com\";\n//eslint-disable-line\nconst AUTH0_CALLBACK_URL = window.location.href;\nconst AUTH0_API_AUDIENCE = \"https://emotion-app-auth/\";\n\nclass Emotions extends React.Component {\n    // constructor(props) {\n        // super(props)\n    // }\n\n    state = {\n        emotions: []\n    }\n\n    componentDidMount() {\n        const hostname = window.location.host\n        var apiURL\n        if (hostname === \"localhost:3000\") {\n            apiURL = \"http://localhost:5000/emotions\"\n        } else {\n            apiURL = \"https://emotion-app-be.herokuapp.com/emotions\"\n        }\n        console.log(apiURL)\n        console.log(hostname)\n        // let request = newRequest(apiURL, {\n            // method: \"GET\",\n            // mode: \"same-origin\",\n            // redirect: \"follow\",\n            // headers: new Headers({\n                // \"Authorization\": ,\n                // \"Content-Type\": \"application/x-www-form-urlencoded\",\n                // \"Bearer \" + localStorage.getItem(\"access_token\")\n            // })\n        // })\n        // let tempTest = new auth0.Webauth({\n        //     domain: AUTH0_DOMAIN,\n        //     clientID: AUTH0_CLIENT_ID\n        // })\n        fetch(apiURL, {\n            method: \"GET\"\n            // headers: {\n            //     \"authorization\": \"Bearer \"\n            // }\n        })\n        .then(res => {\n            return res.json()\n        })\n        .then(data => {\n            this.setState({emotions: data})\n        })\n        .catch(console.log)\n    }\n    render() {\n        console.log(this.state.emotions)\n        const emotionComps = this.state.emotions.map(emotion => {\n            return (\n                <Emotion key={emotion.id} style={{color: emotion.color}} emotion={emotion.value} />\n            )\n        })\n        return (\n            emotionComps\n\n        )\n    }\n}\n\nexport default Emotions\n","import React from \"react\"\n\nfunction Header() {\n    return (\n        <header>\n            How are you feeling today?\n        </header>\n    )\n}\n\nexport default Header;","import React from \"react\"\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div className=\"container\">\n            <div className=\"col-xs-8 col-xs-offset-2 jumbotron text-center\">\n            <h1>Jokeish</h1>\n            <p>A load of Dad jokes XD</p>\n            <p>Sign in to get access </p>\n            <a onClick={this.authenticate} className=\"btn btn-primary btn-lg btn-login btn-block\">Sign In</a>\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default Home","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Footer from './components/Footer'\nimport Emotions from './components/Emotions'\nimport Header from './components/Header'\nimport Home from './components/Home'\n// import emotionData from './jsonDataTemp/emotionData'\n\nclass App extends React.Component {\n  // parseHash() {\n  //   this.auth0 = new this.auth0.WebAuth({\n  //     domain: AUTH0_DOMAIN,\n  //     clientID: AUTH0_CLIENT_ID\n  //   })\n  //   this.auth0.parseHash(window.location.hash, (err, authResult) => {\n  //     if (err) {\n  //       return console.log(err)\n  //     }\n  //     if (authResult !== null && authResult.accessToken !== null && authResult.idToken !== null) {\n  //       localStorage.setItem(\"access_token\", authResult.accessToken)\n  //       localStorage.setItem(\"id_token\", authResult.idToken)\n  //       localStorage.setItem(\"profile\", JSON.stringify(authResult.idTokenPayload))\n  //       window.location = window.location.href.substr(0,window.location.href.indexOf(\"#\"))\n  //     } \n  //   })\n  // }\n\n  // setup() {\n  //   $.ajaxSetup({\n  //     beforeSend: (r) => {\n  //       if (localStorage.getItem(\"access_token\")) {\n  //         r.setRequestHeader(\n  //           \"Authorization\",\n  //           \"Bearer \" + localStorage.getItem(\"access_token\")\n  //         )\n  //       }\n  //     }\n  //   })\n  // }\n\n  // setState() {\n  //   let idToken = localStorage.getItem(\"id_token\")\n  //   if (idToken) {\n  //     this.loggedIn = true\n  //   } else {\n  //     this.loggedIn = false\n  //   }\n  // }\n\n  // componentWillMount() {\n  //   // this.setup()\n  //   this.parseHash()\n  //   this.setState()\n  // }\n\n  // constructor(props) {\n  //   super(props)\n  // }\n  // state = {\n  //   emotions: []\n  // }\n\n  // componentDidMount() {\n  //   const hostname = window.location.host\n  //   var apiURL\n  //   if (hostname === \"localhost:3000\") {\n  //     apiURL = \"http://localhost:5000/emotions\"\n  //   } else {\n  //     apiURL = \"https://emotion-app-be.herokuapp.com/emotions\"\n  //   }\n  //   console.log(apiURL)\n  //   console.log(hostname)\n  //   fetch(apiURL\n  //     // method: \"GET\"\n  //     // headers: {  \n  //     //   \"Access-Control-Allow-Origin\": \"*\",\n  //     //   \"Access-Control-Allow-Headers\": \"access-control-allow-origin, access-control-allow-headers\"\n  //     // }\n  //   )\n  //   .then(res => {\n  //     // console.log(res.clone().json())\n  //     // res.json()\n  //     return res.json()\n  //   })\n  //   .then(data => {\n  //     this.setState({emotions: data})\n  //   })\n  //   .catch(console.log)\n  // }\n\n  render () {\n    // console.log(this.state.emotions)\n    // const emotionComps = this.state.emotions.map(emotion => {\n    //   return (\n    //     <Emotion key={emotion.id} style={{color: emotion.color}} emotion={emotion.value} />\n    //   )\n    // })\n    return (\n      <div className=\"App\">\n        <Header />\n        {!this.loggedIn ?\n          <Emotions /> :\n          <Home />\n        }\n        \n        {/* {emotionComps} */}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}